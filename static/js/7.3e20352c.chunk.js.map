{"version":3,"sources":["views/Dashboard.tsx"],"names":["Title","Typography","Text","Dashboard","props","type","active","useContext","AppContext","cardStatusLoading","cardStatus","statusBarConfig","tasksItems","Object","entries","delay","useState","isPlaying","cardInfoLoading","set_cardInfoLoading","cardScheduleLoading","set_cardScheduleLoading","stopModalShow","set_stopModalShow","getInfoPending","getTasksPending","product","picker_type","version","directory","service_name","pid","pid_owner","client_host","client_role","cardInfo","set_cardInfo","cardTasks","name","start_time","task_error","export_error","color1","color2","scheduler_status","next_start_time","cycles_left","cardSchedule","set_cardSchedule","canStopSchedule","canEnableSchedule","canStopLootnika","startPause","loading","controlsState","set_controlsState","makeStateFromKeys","stateObj","obj","a","m","keys","forEach","k","updateInfo","done","demoMode","axiosGetFake","status","data","getinfo","resp","axiosGet","updateTasks","queueinfo","tasks","slice","message","error","row","count_task_error","count_export_error","push","lol","toString","canStop","indexOf","togleStopModal","stop","success","scheduleAction","cmd","useInterval","title","visible","onOk","stopLootnika","onCancel","okText","cancelText","align","size","wrap","style","minWidth","maxWidth","justify","textAlign","span","level","marginBottom","whiteSpace","orientation","plain","content","trigger","disabled","icon","className","onClick","danger","dataSource","renderItem","item","Item","paddingRight","float","fontWeight","color","fontSize","display","width"],"mappings":"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","file":"static/js/7.3e20352c.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { AppContext } from '../AppProvider';\r\nimport { \r\n  Space,\r\n  Card,\r\n  List,\r\n  message,\r\n  Tooltip,\r\n  Button,\r\n  Typography,\r\n  Popover,\r\n  Modal,\r\n  Row, Col,\r\n  Divider }\r\nfrom 'antd';\r\nimport { axiosGetFake, axiosGet, useInterval } from '../utils/public';\r\nimport { Res, Props, LooseObject } from '../config/index.type';\r\nimport { getinfo, queueinfo, stop } from '../store/apiExamples';\r\nimport { demoMode } from '../config/config';\r\nimport { Bar } from '@ant-design/charts';\r\nimport {\r\n  WarningFilled,\r\n  ExclamationCircleFilled,\r\n  BorderOutlined,\r\n  PauseOutlined,\r\n  StepForwardOutlined,\r\n  CaretRightOutlined,\r\n  ThunderboltOutlined,\r\n  PoweroffOutlined\r\n  }\r\nfrom '@ant-design/icons';\r\n\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nexport default function Dashboard(props: Props) {\r\n  let { cardStatusLoading, cardStatus, statusBarConfig } = useContext(AppContext);\r\n  let tasksItems: Array<Array<string>> = Object.entries(cardStatus[0]);\r\n\r\n  let delay = useState(3000)[0];\r\n  const isPlaying = useState([true])[0]\r\n  const [cardInfoLoading, set_cardInfoLoading] = useState(true);\r\n  const [cardScheduleLoading, set_cardScheduleLoading] = useState(true);\r\n  const [stopModalShow, set_stopModalShow] = useState(false);\r\n\r\n  const getInfoPending = useState([false])[0];\r\n  const getTasksPending = useState([false])[0];\r\n  \r\n  const [cardInfo, set_cardInfo] = useState({\r\n    product: '',\r\n    picker_type: '',\r\n    version: '',\r\n    directory: '',\r\n    service_name: '',\r\n    pid: '',\r\n    pid_owner: '',\r\n    client_host: '',\r\n    client_role: ''\r\n  });\r\n  const cardTasks = useState([[{\r\n    name: '',\r\n    start_time: '',\r\n    task_error: '',\r\n    export_error: '',\r\n    color1: '',\r\n    color2: '',\r\n  }]])[0];\r\n  const [cardSchedule, set_cardSchedule] = useState({\r\n    scheduler_status: '',\r\n    next_start_time: '',\r\n    cycles_left: '-1',\r\n  });\r\n  const [controlsState, set_controlsState] = useState({\r\n    canStopSchedule: false,\r\n    canEnableSchedule: false,\r\n    canStopLootnika: true,\r\n    startPause: {\r\n      active: false,\r\n      type: \"start\",\r\n      loading: false,\r\n    }\r\n  });\r\n\r\n  async function makeStateFromKeys(stateObj: {}, obj: LooseObject) {\r\n    let m:LooseObject = {};\r\n\r\n    Object.keys(stateObj).forEach(k => {\r\n      m[k] = obj[k];\r\n    });\r\n    return m\r\n  };\r\n \r\n  async function updateInfo(): Promise<Boolean> {\r\n    // console.log('updateInfo')\r\n    let done = false;\r\n    if (getInfoPending[0]){\r\n      return false\r\n    }\r\n\r\n    getInfoPending[0] = true;\r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake('a=getinfo', {status: 200, data: getinfo}, 1000);\r\n    }else{\r\n      resp = await axiosGet('a=getinfo');\r\n    }\r\n\r\n    if (resp){\r\n      let a: any = await makeStateFromKeys(cardInfo, resp?.data)      \r\n      if (cardInfoLoading){\r\n        a = await makeStateFromKeys(cardInfo, resp?.data)\r\n        set_cardInfo(a)\r\n        set_cardInfoLoading(false);\r\n        done = true;\r\n      }\r\n    }\r\n    getInfoPending[0] = false;\r\n    return done\r\n  }  \r\n\r\n  async function updateTasks() {\r\n    // console.log('updateTasks')\r\n    if (getTasksPending[0]){\r\n      return\r\n    }\r\n\r\n    getTasksPending[0] = true;\r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake(\r\n          'a=schedule?cmd=QueueInfo&limit=5',\r\n          {status: 200, data: queueinfo}, 600\r\n      );\r\n    }else{\r\n        resp = await axiosGet('a=schedule?cmd=QueueInfo&limit=5');\r\n    }\r\n\r\n    if(resp){\r\n      let tasks = resp.data.tasks.slice(0, 6)\r\n\r\n      if(resp.data.status !== \"ok\"){\r\n        message.error(\"Load tasks: \" + resp.data.message);\r\n        controlsState.canStopSchedule = false\r\n      }else{\r\n        // fill tasks problems\r\n        cardTasks[0] = []\r\n        for (let row of tasks) {\r\n          let color1 = '#9c9c9c'\r\n          let color2 = '#9c9c9c'\r\n\r\n          if (row.count_task_error > 0){\r\n            color1 = '#f56e53'\r\n          }\r\n          if (row.count_export_error > 0){\r\n            color2 = '#f56e53'\r\n          }\r\n\r\n          cardTasks[0].push({\r\n            name: row.name,\r\n            start_time: row.start_time,\r\n            task_error: row.count_task_error,\r\n            export_error: row.count_export_error,\r\n            color1: color1,\r\n            color2: color2\r\n          })\r\n        }\r\n\r\n        // update controls\r\n        let lol = resp?.data.cycles_left.toString() \r\n        if (lol === '-1'){ lol = '∞'}\r\n\r\n        set_cardSchedule({\r\n          scheduler_status: resp?.data.scheduler_status,\r\n          next_start_time: resp?.data.next_start_time,\r\n          cycles_left: lol\r\n        })\r\n            \r\n        let canStop = true\r\n        if([\"cancel\", \"ready\", \"wait\"].indexOf(resp.data.scheduler_status) !== -1){\r\n          canStop = false\r\n        }\r\n        \r\n        let active = true\r\n        if(\"cancel\" === resp.data.scheduler_status){\r\n          active = false\r\n        }\r\n        \r\n        let type = \"start\"\r\n        if(\"pause\" === resp.data.scheduler_status){\r\n          type = \"resume\"\r\n        }else if(\"work\" === resp.data.scheduler_status){\r\n          type = \"pause\"\r\n        }\r\n        \r\n        // console.log(`${canStop} ${active} ${type}`)\r\n        set_controlsState({\r\n          canStopSchedule: canStop,\r\n          canEnableSchedule: controlsState.canEnableSchedule,\r\n          canStopLootnika: controlsState.canStopLootnika,\r\n          startPause: {\r\n            loading: false,\r\n            active: active,\r\n            type: type\r\n          }\r\n        })\r\n\r\n        if(cardScheduleLoading){\r\n          set_cardScheduleLoading(false);\r\n        }\r\n      }\r\n    }\r\n    getTasksPending[0] = false;\r\n  }\r\n\r\n  function enableSchedule(active: boolean){\r\n    if(active){\r\n      return(\r\n        <Popover content={() => {return <div><p>Not working yet (ಥ﹏ಥ)</p></div>}} title=\"Disable schedule\" trigger=\"click\">\r\n          <Button \r\n          type=\"primary\"\r\n          disabled={!controlsState.startPause.active}\r\n          icon={<ThunderboltOutlined />}\r\n          >\r\n          Enable\r\n          </Button>\r\n        </Popover>\r\n      )\r\n    }else{\r\n      return(\r\n        <Popover content={() => {return <div><p>Not working yet (ಥ﹏ಥ)</p></div>}} title=\"Disable schedule\" trigger=\"click\">\r\n          <Button\r\n          disabled={!controlsState.startPause.active}\r\n          icon={<PoweroffOutlined />}\r\n          >\r\n          Disable\r\n          </Button>\r\n        </Popover>\r\n      )\r\n    }\r\n  }\r\n\r\n  async function togleStopModal() {\r\n    set_stopModalShow(!stopModalShow);\r\n  };\r\n\r\n  async function stopLootnika() {\r\n    set_controlsState({\r\n      canStopSchedule: controlsState.canStopSchedule,\r\n      canEnableSchedule: controlsState.canEnableSchedule,\r\n      canStopLootnika: controlsState.canStopLootnika,\r\n      startPause: {\r\n        loading: controlsState.startPause.loading,\r\n        active: controlsState.startPause.active,\r\n        type: controlsState.startPause.type\r\n      }\r\n    })\r\n\r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake('a=stop', {status: 200, data: stop}, 500);\r\n    }else{\r\n      resp = await axiosGet('a=stop');\r\n    }\r\n\r\n    if (resp){\r\n      if(resp.data.status === \"ok\"){\r\n        message.success(\"Lootnika is stopping...\");\r\n      }else{\r\n        message.error(resp.data.message);\r\n      }\r\n    }else{\r\n      message.error(\"Fail to stop Lootnika\");\r\n    }\r\n    await togleStopModal()\r\n}\r\n\r\n  async function scheduleAction(cmd: string) {\r\n    set_controlsState({\r\n      canStopSchedule: false,\r\n      canEnableSchedule: false,\r\n      canStopLootnika: false,\r\n      startPause: {\r\n        loading: true,\r\n        active: controlsState.startPause.active,\r\n        type: controlsState.startPause.type\r\n      }\r\n    })\r\n    \r\n    if(cmd === \"Resume\"){\r\n      let resp: Res\r\n      if(demoMode){\r\n        resp = await axiosGetFake(\r\n          'a=schedule?cmd=QueueInfo&limit=1',\r\n          {status: 200, data: {status: \"ok\", message: \"returned 1 tasks\", tasks: [{name: \"user_topics\"}]}},\r\n          1200\r\n        );\r\n      }else{\r\n        resp = await axiosGet('a=schedule?cmd=QueueInfo&limit=1');\r\n      }\r\n\r\n      if (resp){\r\n        if(resp.data.status === \"ok\"){\r\n          cmd = \"Start&TaskName=\" + resp.data.tasks[0].name\r\n        }else{\r\n          message.error(\"Error: \" + resp.data.message);\r\n        }\r\n      }else{\r\n        message.error(\"Fail to execute command\");\r\n      }\r\n    }\r\n    \r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake('a=schedule?cmd=' + cmd, {status: 200, data: {status: \"ok\", message: \"\"}}, 800);\r\n      let status = \"pause\"\r\n      if(cmd === \"Start&TaskName=user_topics\"){\r\n        resp = await axiosGetFake(\r\n          'a=schedule?cmd=QueueInfo&limit=1',\r\n          {status: 200, data: {status: \"ok\", message: \"continue task user_topics\"}},\r\n          600\r\n        );\r\n        status = \"work\"\r\n      }else if(cmd === 'Start'){\r\n        resp = await axiosGetFake(\r\n          'a=Start',\r\n          {status: 200, data: {status: \"ok\", message: \"begin all tasks\"}},\r\n          600\r\n        );\r\n        status = \"work\"\r\n      }else if(cmd === 'Cancel'){\r\n        status = \"ready\"\r\n      }\r\n\r\n      queueinfo.scheduler_status = status\r\n    }else{\r\n      resp = await axiosGet('a=schedule?cmd=' + cmd);\r\n    }\r\n\r\n    if (resp){\r\n      if(resp.data.status === \"ok\"){\r\n        message.success(resp.data.message);\r\n      }else{\r\n        message.error(resp.data.message);\r\n      }\r\n    }else{\r\n      message.error(\"Fail to execute command\");\r\n    }\r\n  }\r\n\r\n  function pauseButton(type: string) {\r\n    const bType: LooseObject = {\r\n      \"pause\":\r\n        <Button \r\n        className=\"button-warn\"\r\n        type=\"primary\"\r\n        loading={controlsState.startPause.loading}\r\n        disabled={!controlsState.startPause.active}\r\n        icon={<PauseOutlined />}\r\n        onClick={() => scheduleAction(\"Pause\")}>\r\n        Pause\r\n        </Button>,\r\n      \"start\": \r\n        <Button\r\n        type=\"primary\"\r\n        loading={controlsState.startPause.loading}\r\n        disabled={!controlsState.startPause.active}\r\n        icon={<StepForwardOutlined />}\r\n        onClick={() => scheduleAction(\"Start\")}>\r\n        Run once\r\n        </Button>,\r\n      \"resume\": \r\n        <Button \r\n        type=\"primary\"\r\n        loading={controlsState.startPause.loading}\r\n        disabled={!controlsState.startPause.active}\r\n        icon={<CaretRightOutlined />}\r\n        onClick={() => scheduleAction(\"Resume\")}>\r\n        Resume\r\n        </Button>,\r\n    }\r\n    return(bType[type])\r\n  }\r\n\r\n  if (cardInfoLoading && !getInfoPending[0]){\r\n    updateInfo();\r\n  }\r\n  if (cardScheduleLoading && !getTasksPending[0]){\r\n    updateTasks();\r\n  }\r\n\r\n  useInterval(\r\n    () => {\r\n      if (cardInfoLoading && !getInfoPending[0]){\r\n        updateInfo();\r\n      }\r\n\r\n      if (cardScheduleLoading && !getTasksPending[0]){\r\n        updateTasks();\r\n      }\r\n\r\n      if (!cardInfoLoading && !cardScheduleLoading){\r\n        isPlaying[0] = false\r\n      }\r\n    }, isPlaying[0] ? delay : null,\r\n  );\r\n  \r\n  useInterval(\r\n    () => {\r\n      updateTasks()\r\n    }, 3000\r\n  )\r\n\r\n  return (\r\n    <>\r\n    <Modal\r\n        title=\"Stop lootnika\"\r\n        visible={stopModalShow}\r\n        onOk={() => stopLootnika()}\r\n        onCancel={() => togleStopModal()}\r\n        okText=\"Stop anyway\"\r\n        cancelText=\"Cancel\">\r\n        <p>You trying to stop Lootnika</p>\r\n        <p>Lootnika control panel will not work</p>\r\n        <p>Are you sure?</p>\r\n    </Modal>\r\n\r\n    <Space align=\"start\" size=\"middle\" wrap>\r\n      <Card title=\"Schedule\" loading={cardScheduleLoading} style={{minWidth: \"61em\", maxWidth: \"120em\"}}>\r\n        <Row justify=\"space-around\" style={{textAlign: 'center' }}>\r\n          <Col span={6}>\r\n            <Title level={3} style={{marginBottom: 0, whiteSpace: 'nowrap'}}>{cardSchedule.scheduler_status}</Title>\r\n            <Text>status</Text>\r\n          </Col>\r\n          <Col span={12}>\r\n            <Title level={3} style={{marginBottom: 0}}>{cardSchedule.next_start_time}</Title>\r\n            <Text>next start time</Text>\r\n          </Col>\r\n          <Col span={6}>\r\n            <Title level={3} style={{marginBottom: 0, whiteSpace: 'nowrap'}}>{cardSchedule.cycles_left}</Title>\r\n            <Text>cycles left</Text>\r\n          </Col>\r\n        </Row>\r\n        <Divider orientation=\"left\" plain>Control</Divider>\r\n        <Row justify=\"space-around\" style={{textAlign: 'center' }}>\r\n          <Col span={6}>\r\n            {enableSchedule(controlsState.canEnableSchedule)}\r\n          </Col>\r\n          <Col span={6}>\r\n            {pauseButton(controlsState.startPause.type)}\r\n          </Col>\r\n          <Col span={6}>\r\n            <Button\r\n              danger\r\n              type=\"primary\"\r\n              disabled={!controlsState.canStopSchedule}\r\n              icon={<BorderOutlined />}\r\n              onClick={() => scheduleAction(\"Cancel\")}>\r\n              Abort task\r\n            </Button>\r\n          </Col>\r\n          <Col span={6}>\r\n            <Button \r\n              danger type=\"primary\"\r\n              disabled={!controlsState.canStopLootnika}\r\n              icon={<PoweroffOutlined />} onClick={() => togleStopModal()}>\r\n                Stop lootnika\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Divider orientation=\"left\" plain>Tasks problems</Divider>\r\n        <List\r\n          dataSource={cardTasks[0]}\r\n          renderItem={item => \r\n            <List.Item>\r\n              <span className=\"simple-list-item\">\r\n                {item.name}\r\n              </span>\r\n              <span style={{paddingRight: '0.5em'}}>{item.start_time}</span>\r\n              <span className=\"simple-list-item\" style={{float: \"right\"}}>\r\n                <Space align=\"start\" size=\"small\" wrap style={{fontWeight: 600}}>\r\n                  <Tooltip title=\"Task errors\">\r\n                    <ExclamationCircleFilled style={{color: item.color1, paddingRight: '0.2em', fontSize: 'large'}} />\r\n                    {item.task_error}\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Export errors\">\r\n                    <WarningFilled style={{color: item.color2, paddingRight: '0.2em', fontSize: 'large'}} />\r\n                    {item.export_error}\r\n                  </Tooltip>\r\n                </Space>\r\n              </span>\r\n            </List.Item>\r\n          }\r\n        />\r\n      </Card>\r\n      <Card title=\"Status\" loading={cardStatusLoading} style={{minWidth: \"30em\", maxWidth: \"60em\"}}>\r\n        <span>RAM usage</span>\r\n        <Bar {...statusBarConfig} />\r\n        <List\r\n          dataSource={tasksItems}\r\n          renderItem={item => \r\n            <List.Item style={{display: \"block\"}}>\r\n              <span className=\"simple-list-item\" style={{width: \"12em\", display: \"inline-block\" }}>{item[0]}</span>\r\n              <span className=\"simple-list-item\" style={{display: \"inline-block\" }}>{item[1]}</span>\r\n            </List.Item>\r\n          }\r\n        />\r\n      </Card>\r\n      <Card title=\"Info\" loading={cardInfoLoading} style={{minWidth: \"30em\", maxWidth: \"60em\"}}>\r\n        <List\r\n          dataSource={Object.entries(cardInfo)}\r\n          renderItem={item => \r\n            <List.Item style={{display: \"block\"}}>\r\n              <span className=\"simple-list-item\" style={{width: \"10em\", display: \"inline-block\" }}>{item[0]}</span>\r\n              <span className=\"simple-list-item\" style={{display: \"inline-block\" }}>{item[1]}</span>\r\n            </List.Item>\r\n          }\r\n        />\r\n      </Card>\r\n    </Space>\r\n  </>\r\n  );\r\n}\r\n"],"sourceRoot":""}