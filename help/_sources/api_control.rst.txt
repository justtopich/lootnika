Контрольные команды
=========================================
Команды, которые используются для контроля работы Лутники.

.. contents:: :local:


Stop
----------------------------------------
Остановка Лутники.

Настоятельно рекомендуется останавливать Лутнику либо через службу, либо данной командой, либо через консоль комбинацией :kbd:`ctrl` + :kbd:`c`.
При штатной остановке Лутники прекращает выполнять задания, экспортирует документы которые успела получить и сохраняет все данные в журнал заданий.

.. code-block:: monte

	a=stop


Schedule
----------------------------------------
Управление заданиями.

Вы можете запускать и останавливать задания, а так же следить за ходом их выполнения.
Все команды планировщика задания задаются в параметре :option:`cmd`


Schedule: TasksInfo
^^^^^^^^^^^^^^^^^^^^^^
Получение заданий и их параметров.

Лутника вернёт только те задания, которые объявлены в секции :doc:`Schedule <config_schedule>`.

.. code-block:: monte

	a=schedule?cmd=TasksInfo

.. warning::
	Параметры заданий могут отличаться от таковых в настройках. Такое происходит после инициализации задания и нужны для работы Лутники. В настройках эти изменения не сохраняются. 


Schedule: QueueInfo
^^^^^^^^^^^^^^^^^^^^^^
Просмотр журнал заданий.

Получение списка завершённых и текущих заданий, их статуса и прогресса выполнения. По умолчанию вернёт 20 последних записей.

.. code-block:: monte

	a=schedule?cmd=QueueInfo&taskName=news,posts&limit=100

Дополнительные параметры:
	* **taskName** - список заданий по которым делать выборку. Задания перечисляются через запятую
	* **start** - указывает пропустить указанное число заданий, прежде чем выдать результат
	* **limit** - ограничение размера выдачи


Команда вернёт следующие поля:

.. list-table::
   :widths: 20 10 70
   :header-rows: 1

   * - Поле
     - Формат
     - Значение
   * - scheduler_status
     - Строка
     - Статус планировщика заданий. Может иметь один из следующих статусов: 
		* **ready** - готов к новому циклу заданий.
		* **wait** - ждёт время старта следующего повтора.
		* **work** - выполняет цикл заданий.
		* **pause** - планировщик приостановлен пользователем.
		* **cancel** - остановка выполнения текущего цикла заданий
   * - next_start_time
     - Строка
     - Дата и время следующего старта заданий
   * - cycles_left
     - Число
     - Количество оставшихся повторов заданий. Значение *-1* означает бесконечное повторение. 
   * - Tasks
     - Массив
     - Статистика заданий

Объект ``tasks`` содержит объекты со следующим набором полей: 

.. list-table::
   :widths: 25 10 65
   :header-rows: 1

   * - Поле
     - Формат
     - Значение
   * - id
     - Число
     - ID задания
   * - name
     - Строка
     - Имя задания
   * - start_time
     - Строка
     - Время старта задания
   * - end_time
     - Строка
     - Последнее время обновления статуса задания
   * - status
     - Строка
     - Статус задания. Задание может иметь одно из следующих: 
		* **run** - выполняется
		* **pause** - приостановлено
		* **complete** - выполнено
		* **cancel** - отменено
		* **fail** - не выполнено или прервано
   * - count_total
     - Число
     - Кол-во документов которые будут обработаны
   * - count_seen
     - Число
     - Кол-во документов которые коннектор просмотрел
   * - count_new
     - Число
     - Кол-во новых документов
   * - count_differ
     - Число
     - Кол-во изменённых документов
   * - count_delete
     - Число
     -  	Кол-во удалённых документов
   * - count_task_error
     - Число
     - Кол-во ошибок возникших во время выполнения задания
   * - count_export_error
     - Число
     - Кол-во ошибок связанных с экспортом документов
   * - last_doc_id
     - Строка
     - ID последнего обработанного документа

Schedule: Start
^^^^^^^^^^^^^^^^^^^^^^
Старт или возобновление заданий.

Запускает цикл заданий, даже если расписание выключено (см. :doc:`Schedule <config_schedule>` ). Выполнение этих заданий произойдёт один раз в порядке, указанном в настройках. 

.. code-block:: monte

	a=schedule?cmd=Start
	
Используя параметр :option:`TaskName` можно запустить одну конкретную задачу:

.. code-block:: monte
	
	a=schedule?cmd=Start&TaskName=FuriKuri

Этот параметр обязателен при возобновлении задания.

.. attention::
	Таким способом можно запустить только те задания, которые заданы в расписании.
	Счётчик выполнений :doc:`Schedule: TaskCycles <config_schedule>` не учитывает задания запущенные таким образом.


Schedule: Pause
^^^^^^^^^^^^^^^^^^^^^^
Приостановка выполнения заданий.

Приостановка выполняется на неограниченное время, однако, отсчёт времени старта до следующего цикла продолжается. Если наступит время выполнения очередного цикла задания во время паузы - запуск будет засчитан счётчиком заданий :doc:`TaskCycles <config_schedule>`, но цикл будет пропущен, т.к. Лутника не может выполнять несколько заданий одновременно.

.. code-block:: monte
	
	a=schedule?cmd=Pause


Schedule: Cancel
^^^^^^^^^^^^^^^^^^^^^^
Отмена выполнения заданий.

Если во время отмены выполняется задание из цикла, будет прерван весь цикл.
При отмене Лутника выполнит экспорт всех документов что успела собрать, но при этом не будет отправлять команду на удаление старых документов из источника.

.. code-block:: monte
	
	a=schedule?cmd=Cancel


Log
----------------------------------------
Чтение журналов событий.


Лутника позволяет как просматривать содержимое логов, так и скачивать их. Но для таких операций всегда нужно указывать
конкретный файл.

.. code-block:: monte

	a=log?cmd=list


.. code-block:: json

	{"files": ["lootnika.log", "rest.log", "rest.log.1", "rest.log.2"]}


.. warning::
    Лутника работает только с логами находящиеся в папке :file:`logs`.



Параметры:

.. list-table::
   :widths: 10 10 10 70
   :header-rows: 1

   * - Параметр
     - Требует
     - Формат
     - Значение
   * - cmd
     -
     - строка
     - принимает значения:
		* **list** - получить список файлов
		* **read** - прочитать указанный файл
		* **get** - скачать указанный файл
   * - file
     - cmd=read cmd=get
     - строка
     - лог файл котрый нужно прочесть.
   * - limit
     - cmd=read
     - число
     - лимит возращаемых строк. По умолчанию ``10``
   * - backward
     - cmd=read
     - булево
     - Чтение c конца файла. По умолчанию ``True``
   * - offset
     - cmd=read
     - число
     - Положение курсора в файле.

Вместе со строками, Лутника возвращает текущий :option:`offset` который можно использовать для получения следующих
строк от последней прочитанной позиции, и :option:`end` по которому можно отслеживать изменился ли файл.

.. code-block:: monte

    a=log?cmd=read&file=lootnika.log&limit=3


.. code-block:: json

    {
    "offset": 54392,
    "end": 54553,
    "records": [
        "2021-29-04 19:58:00 Lootnika INFO: Welcome to http://localhost:8080/admin\r\n",
        "2021-29-04 19:58:00 Lootnika INFO: Lootnika started - Source version: 1.2.0-beta.0_nt\r\n",

    ]}


Указывая :option:`offset` который возвращает Лутника вы будете читать файл последовательно пока не достигните его конца или начала.
Если указать конец файла, то список строк будет пустым. Однако, если указать начало файла, то вы получите первую строку:

.. code-block:: monte

    a=log?cmd=read&file=lootnika.log&limit=3&offset=0


.. code-block:: json

    {
    "offset": -1,
    "end": 54553,
    "records": [
        "2021-26-04 21:34:10 Lootnika INFO: Starting...\r\n"
    ]}


Так получается потому что Лутника читает строку с той позиции, на которой стоит курсор и только потом переходит на следующую.
