{"version":3,"sources":["views/Dashboard.tsx"],"names":["Title","Typography","Text","Dashboard","props","useContext","AppContext","cardStatusLoading","cardStatus","statusBarConfig","tasksItems","Object","entries","delay","useState","isPlaying","cardInfoLoading","set_cardInfoLoading","cardScheduleLoading","set_cardScheduleLoading","actualTasksLoading","set_actualTasksLoading","stopModalShow","set_stopModalShow","getInfoPending","getTasksPending","getActualTasksPending","actualTasks","label","value","actualTasksValue","set_actualTasksValue","product","picker_type","version","directory","service_name","pid","pid_owner","client_host","client_role","cardInfo","set_cardInfo","cardTasks","name","start_time","task_error","export_error","color1","color2","scheduler_status","next_start_time","cycles_left","cardSchedule","set_cardSchedule","canStopSchedule","canEnableSchedule","canStopLootnika","startPause","active","type","loading","controlsState","set_controlsState","selectTasksProps","style","width","options","onChange","newValue","defaultValue","makeStateFromKeys","stateObj","obj","a","m","keys","forEach","k","console","log","done","demoMode","axiosGetFake","status","data","tasksinfo","resp","axiosGet","tasks","push","updateInfo","getinfo","updateTasks","queueinfo","slice","message","error","row","count_task_error","count_export_error","lol","toString","canStop","indexOf","showSadSmile","togleStopModal","stop","success","scheduleAction","cmd","taskName","taskNameCmd","unshift","createFakeTask","useInterval","getActualTasks","controlButtons","content","title","trigger","icon","disabled","onClick","className","danger","visible","onOk","stopLootnika","onCancel","okText","cancelText","align","size","wrap","minWidth","maxWidth","justify","textAlign","span","level","marginBottom","whiteSpace","orientation","plain","dataSource","renderItem","item","Item","paddingRight","float","fontWeight","color","fontSize","display"],"mappings":"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","file":"static/js/7.963d82ee.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { AppContext } from '../AppProvider';\r\nimport { \r\n  Space,\r\n  Card,\r\n  List,\r\n  message,\r\n  Tooltip,\r\n  Button,\r\n  Typography,\r\n  Popover,\r\n  Modal,\r\n  Select,\r\n  Row, Col,\r\n  Divider }\r\nfrom 'antd';\r\nimport { axiosGetFake, axiosGet, useInterval, createFakeTask } from '../utils/public';\r\nimport { Res, Props, LooseObject } from '../config/index.type';\r\nimport { getinfo, queueinfo, tasksinfo, stop } from '../store/apiExamples';\r\nimport { demoMode } from '../config/config';\r\nimport { Bar } from '@ant-design/charts';\r\nimport {\r\n  WarningFilled,\r\n  ExclamationCircleFilled,\r\n  BorderOutlined,\r\n  PauseOutlined,\r\n  StepForwardOutlined,\r\n  CaretRightOutlined,\r\n  ThunderboltOutlined,\r\n  PoweroffOutlined,\r\n  FileZipFilled,\r\n  DropboxOutlined,\r\n  }\r\nfrom '@ant-design/icons';\r\n\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nexport default function Dashboard(props: Props) {\r\n  let { cardStatusLoading, cardStatus, statusBarConfig } = useContext(AppContext);\r\n  let tasksItems: Array<Array<string>> = Object.entries(cardStatus[0]);\r\n\r\n  let delay = useState(3000)[0];\r\n  const isPlaying = useState([true])[0]\r\n  const [cardInfoLoading, set_cardInfoLoading] = useState(true);\r\n  const [cardScheduleLoading, set_cardScheduleLoading] = useState(true);\r\n  const [actualTasksLoading, set_actualTasksLoading] = useState(true);\r\n  const [stopModalShow, set_stopModalShow] = useState(false);\r\n\r\n  const getInfoPending = useState([false])[0];\r\n  const getTasksPending = useState([false])[0];\r\n  const getActualTasksPending = useState([false])[0];\r\n  \r\n  const actualTasks = useState([[{label: 'all', value: 'all'}]])[0]\r\n  const [actualTasksValue, set_actualTasksValue] = useState(actualTasks[0][0].value)\r\n\r\n  const [cardInfo, set_cardInfo] = useState({\r\n    product: '',\r\n    picker_type: '',\r\n    version: '',\r\n    directory: '',\r\n    service_name: '',\r\n    pid: '',\r\n    pid_owner: '',\r\n    client_host: '',\r\n    client_role: ''\r\n  });\r\n  const cardTasks = useState([[{\r\n    name: '',\r\n    start_time: '',\r\n    task_error: '',\r\n    export_error: '',\r\n    color1: '',\r\n    color2: '',\r\n  }]])[0];\r\n  const [cardSchedule, set_cardSchedule] = useState({\r\n    scheduler_status: '',\r\n    next_start_time: '',\r\n    cycles_left: '-1',\r\n  });\r\n  const [controlsState, set_controlsState] = useState({\r\n    canStopSchedule: false,\r\n    canEnableSchedule: false,\r\n    canStopLootnika: true,\r\n    startPause: {\r\n      active: false,\r\n      type: \"start\",\r\n      loading: false,\r\n    }\r\n  });\r\n  const selectTasksProps = {\r\n    style: { width: 200 },\r\n    value: actualTasksValue,\r\n    options: actualTasks[0],\r\n    onChange: (newValue: string) => {\r\n      set_actualTasksValue(newValue);\r\n    },\r\n    defaultValue: actualTasks[0][0].value,\r\n    loading: actualTasksLoading,\r\n  };\r\n\r\n\r\n  async function makeStateFromKeys(stateObj: {}, obj: LooseObject) {\r\n    let m:LooseObject = {};\r\n\r\n    Object.keys(stateObj).forEach(k => {\r\n      m[k] = obj[k];\r\n    });\r\n    return m\r\n  };\r\n \r\n  async function getActualTasks(): Promise<Boolean> {\r\n    console.log('getActualTasks')\r\n    let done = false;\r\n    if (getActualTasksPending[0]){\r\n      return false\r\n    }\r\n\r\n    getActualTasksPending[0] = true;\r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake('a=schedule?cmd=TasksInfo', {status: 200, data: tasksinfo}, 1000);\r\n    }else{\r\n      resp = await axiosGet('a=schedule?cmd=TasksInfo');\r\n    }\r\n\r\n    if (resp){\r\n      let m = [{label: 'all', value: 'all'}]\r\n      Object.keys(resp?.data.tasks).forEach(k => {\r\n        m.push({label: k, value: k})\r\n      });\r\n      actualTasks[0] = m\r\n      set_actualTasksLoading(false)\r\n      done = true;\r\n      }\r\n    getActualTasksPending[0] = false;\r\n    return done\r\n  }  \r\n\r\n  async function updateInfo(): Promise<Boolean> {\r\n    console.log('updateInfo')\r\n    let done = false;\r\n    if (getInfoPending[0]){\r\n      return false\r\n    }\r\n\r\n    getInfoPending[0] = true;\r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake('a=getinfo', {status: 200, data: getinfo}, 1000);\r\n    }else{\r\n      resp = await axiosGet('a=getinfo');\r\n    }\r\n\r\n    if (resp){\r\n      let a: any = await makeStateFromKeys(cardInfo, resp?.data)      \r\n      if (cardInfoLoading){\r\n        a = await makeStateFromKeys(cardInfo, resp?.data)\r\n        set_cardInfo(a)\r\n        set_cardInfoLoading(false);\r\n        done = true;\r\n      }\r\n    }\r\n    getInfoPending[0] = false;\r\n    return done\r\n  }  \r\n\r\n  async function updateTasks() {\r\n    // console.log('updateTasks')\r\n    if (getTasksPending[0]){\r\n      return\r\n    }\r\n\r\n    getTasksPending[0] = true;\r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake(\r\n          'a=schedule?cmd=QueueInfo&limit=6',\r\n          {status: 200, data: queueinfo}, 600\r\n      );\r\n    }else{\r\n        resp = await axiosGet('a=schedule?cmd=QueueInfo&limit=6');\r\n    }\r\n\r\n    if(resp){\r\n      let tasks = resp.data.tasks.slice(0, 6)\r\n\r\n      if(resp.data.status !== \"ok\"){\r\n        message.error(\"Load tasks: \" + resp.data.message);\r\n        controlsState.canStopSchedule = false\r\n      }else{\r\n        // fill tasks problems\r\n        cardTasks[0] = []\r\n        for (let row of tasks) {\r\n          let color1 = '#9c9c9c'\r\n          let color2 = '#9c9c9c'\r\n\r\n          if (row.count_task_error > 0){\r\n            color1 = '#f56e53'\r\n          }\r\n          if (row.count_export_error > 0){\r\n            color2 = '#f56e53'\r\n          }\r\n\r\n          cardTasks[0].push({\r\n            name: row.name,\r\n            start_time: row.start_time,\r\n            task_error: row.count_task_error,\r\n            export_error: row.count_export_error,\r\n            color1: color1,\r\n            color2: color2\r\n          })\r\n        }\r\n\r\n        // update controls\r\n        let lol = resp?.data.cycles_left.toString() \r\n        if (lol === '-1'){ lol = '∞'}\r\n\r\n        set_cardSchedule({\r\n          scheduler_status: resp?.data.scheduler_status,\r\n          next_start_time: resp?.data.next_start_time,\r\n          cycles_left: lol\r\n        })\r\n            \r\n        let canStop = true\r\n        if([\"cancel\", \"ready\", \"wait\"].indexOf(resp.data.scheduler_status) !== -1){\r\n          canStop = false\r\n        }\r\n        \r\n        let active = true\r\n        if(\"cancel\" === resp.data.scheduler_status){\r\n          active = false\r\n        }\r\n        \r\n        let type = \"start\"\r\n        if(\"pause\" === resp.data.scheduler_status){\r\n          type = \"resume\"\r\n        }else if(\"work\" === resp.data.scheduler_status){\r\n          type = \"pause\"\r\n        }\r\n        \r\n        // console.log(`${canStop} ${active} ${type}`)\r\n        set_controlsState({\r\n          canStopSchedule: canStop,\r\n          canEnableSchedule: controlsState.canEnableSchedule,\r\n          canStopLootnika: true,\r\n          startPause: {\r\n            loading: false,\r\n            active: active,\r\n            type: type\r\n          }\r\n        })\r\n\r\n        if(cardScheduleLoading){\r\n          set_cardScheduleLoading(false);\r\n        }\r\n      }\r\n    }\r\n    getTasksPending[0] = false;\r\n  }\r\n\r\n  function showSadSmile() {\r\n    return <div><p>Not working yet (ಥ﹏ಥ)</p></div>\r\n  }\r\n\r\n  function enableSchedule(active: boolean){\r\n    if(active){\r\n      return(\r\n        <Popover content={showSadSmile()} title=\"Disable schedule\" trigger=\"click\">\r\n          <Button \r\n          type=\"primary\"\r\n          disabled={!controlsState.startPause.active}\r\n          icon={<ThunderboltOutlined />}\r\n          >\r\n          Enable\r\n          </Button>\r\n        </Popover>\r\n      )\r\n    }else{\r\n      return(\r\n        <Popover content={showSadSmile()} title=\"Disable schedule\" trigger=\"click\">\r\n          <Button\r\n          disabled={!controlsState.startPause.active}\r\n          icon={<PoweroffOutlined />}\r\n          >\r\n          Disable\r\n          </Button>\r\n        </Popover>\r\n      )\r\n    }\r\n  }\r\n\r\n  async function togleStopModal() {\r\n    set_stopModalShow(!stopModalShow);\r\n  };\r\n\r\n  async function stopLootnika() {\r\n    set_controlsState({\r\n      canStopSchedule: controlsState.canStopSchedule,\r\n      canEnableSchedule: controlsState.canEnableSchedule,\r\n      canStopLootnika: controlsState.canStopLootnika,\r\n      startPause: {\r\n        loading: controlsState.startPause.loading,\r\n        active: controlsState.startPause.active,\r\n        type: controlsState.startPause.type\r\n      }\r\n    })\r\n\r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake('a=stop', {status: 200, data: stop}, 500);\r\n    }else{\r\n      resp = await axiosGet('a=stop');\r\n    }\r\n\r\n    if (resp){\r\n      if(resp.data.status === \"ok\"){\r\n        message.success(\"Lootnika is stopping...\");\r\n      }else{\r\n        message.error(resp.data.message);\r\n      }\r\n    }else{\r\n      message.error(\"Fail to stop Lootnika\");\r\n    }\r\n    await togleStopModal()\r\n}\r\n\r\n  async function scheduleAction(cmd: string, taskName: string) {\r\n    set_controlsState({\r\n      canStopSchedule: false,\r\n      canEnableSchedule: false,\r\n      canStopLootnika: true,\r\n      startPause: {\r\n        loading: true,\r\n        active: controlsState.startPause.active,\r\n        type: controlsState.startPause.type\r\n      }\r\n    })\r\n\r\n    let taskNameCmd: string\r\n    if(taskName === 'all'){\r\n      taskNameCmd = ''\r\n    }else{\r\n      taskNameCmd = '&TaskName=' + taskName\r\n    }\r\n\r\n    let resp: Res\r\n    if(demoMode){\r\n      let status = \"pause\"\r\n      let message = 'successfully paused task ' + taskName\r\n      if(cmd === 'start'){\r\n        queueinfo.tasks.unshift(createFakeTask(taskName, 'now'))\r\n        message = 'successfully started task ' + taskName\r\n        status = \"work\"\r\n      }else if(cmd === 'cancel'){\r\n        status = \"ready\"\r\n        message = 'successfully canceled task ' + taskName\r\n      }\r\n\r\n      resp = await axiosGetFake('a=schedule?cmd=' + cmd, {status: 200, data: {status: \"ok\", message: message}}, 800);\r\n      queueinfo.scheduler_status = status\r\n    }else{\r\n      resp = await axiosGet(`a=schedule?cmd=${cmd}${taskNameCmd}`);\r\n    }\r\n\r\n    if (resp){\r\n      if(resp.data.status === \"ok\"){\r\n        message.success(resp.data.message);\r\n      }else{\r\n        message.error(resp.data.message);\r\n      }\r\n    }else{\r\n      message.error(\"Fail to execute command\");\r\n    }\r\n\r\n  }\r\n\r\n  function pauseButton(type: string) {\r\n    const bType: LooseObject = {\r\n      \"pause\":\r\n        <Button \r\n        className=\"button-warn\"\r\n        type=\"primary\"\r\n        loading={controlsState.startPause.loading}\r\n        disabled={!controlsState.startPause.active}\r\n        icon={<PauseOutlined />}\r\n        onClick={() => scheduleAction(\"pause\", actualTasksValue)}>\r\n        Pause\r\n        </Button>,\r\n      \"start\": \r\n        <Button\r\n        loading={controlsState.startPause.loading}\r\n        disabled={!controlsState.startPause.active}\r\n        icon={<StepForwardOutlined />}\r\n        className=\"button-success\"\r\n        onClick={() => scheduleAction(\"start\", actualTasksValue)}>\r\n        Run once\r\n        </Button>,\r\n      \"resume\": \r\n        <Button \r\n        loading={controlsState.startPause.loading}\r\n        disabled={!controlsState.startPause.active}\r\n        className=\"button-success\"\r\n        icon={<CaretRightOutlined />}\r\n        onClick={() => scheduleAction(\"start\", actualTasksValue)}>\r\n        Resume\r\n        </Button>,\r\n    }\r\n    return(bType[type])\r\n  }\r\n\r\n  if (cardInfoLoading && !getInfoPending[0]){\r\n    updateInfo();\r\n  }\r\n  if (cardScheduleLoading && !getTasksPending[0]){\r\n    updateTasks();\r\n  }\r\n\r\n  useInterval(\r\n    () => {\r\n      if (cardInfoLoading && !getInfoPending[0]){\r\n        updateInfo();\r\n      }\r\n\r\n      if (cardScheduleLoading && !getTasksPending[0]){\r\n        updateTasks();\r\n      }\r\n\r\n      if(actualTasksLoading){\r\n        getActualTasks()\r\n      }\r\n\r\n      if (!cardInfoLoading && !cardScheduleLoading){\r\n        isPlaying[0] = false\r\n      }\r\n    }, isPlaying[0] ? delay : null,\r\n  );\r\n  \r\n  useInterval(\r\n    () => {\r\n      updateTasks()\r\n    }, 3000\r\n  )\r\n\r\n  // actualTasks.forEach(i => console.log(i))\r\n\r\n  const controlButtons: Array<Object> = [\r\n    <Popover content={showSadSmile()} title=\"Disable schedule\" trigger=\"click\">\r\n      <Button\r\n      type=\"primary\"\r\n      icon={<FileZipFilled />}\r\n      loading={controlsState.startPause.loading}\r\n      disabled={!controlsState.startPause.active}\r\n      onClick={() => showSadSmile()}>\r\n      Backup\r\n      </Button>\r\n    </Popover>,\r\n    <Popover content={showSadSmile()} title=\"Disable schedule\" trigger=\"click\">\r\n      <Button\r\n      type=\"primary\"\r\n      icon={<DropboxOutlined />}\r\n      className=\"button-warn\"\r\n      loading={controlsState.startPause.loading}\r\n      disabled={!controlsState.startPause.active}\r\n      onClick={() => showSadSmile()}>\r\n      Restore\r\n      </Button>\r\n    </Popover>,\r\n    <Button \r\n      danger type=\"primary\"\r\n      icon={<PoweroffOutlined />}\r\n      disabled={!controlsState.canStopLootnika}\r\n      onClick={() => togleStopModal()}>\r\n        Stop lootnika\r\n    </Button>\r\n  ]\r\n\r\n  return (\r\n    <>\r\n    <Modal\r\n        title=\"Stop lootnika\"\r\n        visible={stopModalShow}\r\n        onOk={() => stopLootnika()}\r\n        onCancel={() => togleStopModal()}\r\n        okText=\"Stop anyway\"\r\n        cancelText=\"Cancel\">\r\n        <p>You trying to stop Lootnika</p>\r\n        <p>Lootnika control panel will not work</p>\r\n        <p>Are you sure?</p>\r\n    </Modal>\r\n\r\n    <Space align=\"start\" size=\"middle\" wrap>\r\n      <Card title=\"Schedule\" loading={cardScheduleLoading} style={{minWidth: \"61em\", maxWidth: \"120em\"}}>\r\n        <Row justify=\"space-around\" style={{textAlign: 'center' }}>\r\n          <Col span={6}>\r\n            <Title level={3} style={{marginBottom: 0, whiteSpace: 'nowrap'}}>{cardSchedule.scheduler_status}</Title>\r\n            <Text>status</Text>\r\n          </Col>\r\n          <Col span={12}>\r\n            <Title level={3} style={{marginBottom: 0}}>{cardSchedule.next_start_time}</Title>\r\n            <Text>next start time</Text>\r\n          </Col>\r\n          <Col span={6}>\r\n            <Title level={3} style={{marginBottom: 0, whiteSpace: 'nowrap'}}>{cardSchedule.cycles_left}</Title>\r\n            <Text>cycles left</Text>\r\n          </Col>\r\n        </Row>\r\n        <Divider orientation=\"left\" plain>Control</Divider>\r\n        <Row justify=\"space-around\" style={{textAlign: 'center' }}>\r\n          <Col span={6}>\r\n            {/* <Select defaultValue={actualTasks[0]} style={{ width: 200 }}> */}\r\n              {/* {() => actualTasks.forEach(i => <Option value={i}>{i}</Option>)} */}\r\n            {/* </Select> */}\r\n            <Select {...selectTasksProps} />\r\n          </Col>\r\n          <Col span={6}>\r\n            {pauseButton(controlsState.startPause.type)}\r\n          </Col>\r\n          <Col span={6}>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!controlsState.canStopSchedule}\r\n              icon={<BorderOutlined />}\r\n              onClick={() => scheduleAction(\"cancel\", actualTasksValue)}>\r\n              Cancel task\r\n            </Button>\r\n          </Col>\r\n          <Col span={6}>\r\n            {enableSchedule(controlsState.canEnableSchedule)}\r\n          </Col>\r\n        </Row>\r\n        <Divider orientation=\"left\" plain>Last tasks</Divider>\r\n        <List\r\n          dataSource={cardTasks[0]}\r\n          renderItem={item => \r\n            <List.Item>\r\n              <span className=\"simple-list-item\">\r\n                {item.name}\r\n              </span>\r\n              <span style={{paddingRight: '0.5em'}}>{item.start_time}</span>\r\n              <span className=\"simple-list-item\" style={{float: \"right\"}}>\r\n                <Space align=\"start\" size=\"small\" wrap style={{fontWeight: 600}}>\r\n                  <Tooltip title=\"Task errors\">\r\n                    <ExclamationCircleFilled style={{color: item.color1, paddingRight: '0.2em', fontSize: 'large'}} />\r\n                    {item.task_error}\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Export errors\">\r\n                    <WarningFilled style={{color: item.color2, paddingRight: '0.2em', fontSize: 'large'}} />\r\n                    {item.export_error}\r\n                  </Tooltip>\r\n                </Space>\r\n              </span>\r\n            </List.Item>\r\n          }\r\n        />\r\n      </Card>\r\n      <Card title=\"Status\" loading={cardStatusLoading} style={{minWidth: \"30em\", maxWidth: \"60em\"}}>\r\n        <span>RAM usage</span>\r\n        <Bar {...statusBarConfig} />\r\n        <List\r\n          dataSource={tasksItems}\r\n          renderItem={item => \r\n            <List.Item style={{display: \"block\"}}>\r\n              <span className=\"simple-list-item\" style={{width: \"12em\", display: \"inline-block\" }}>{item[0]}</span>\r\n              <span className=\"simple-list-item\" style={{display: \"inline-block\" }}>{item[1]}</span>\r\n            </List.Item>\r\n          }\r\n        />\r\n      </Card>\r\n      <Card title=\"Info\" loading={cardInfoLoading} style={{minWidth: \"30em\", maxWidth: \"60em\"}}>\r\n        <List\r\n          dataSource={Object.entries(cardInfo)}\r\n          renderItem={item => \r\n            <List.Item style={{display: \"block\"}}>\r\n              <span className=\"simple-list-item\" style={{width: \"10em\", display: \"inline-block\" }}>{item[0]}</span>\r\n              <span className=\"simple-list-item\" style={{display: \"inline-block\" }}>{item[1]}</span>\r\n            </List.Item>\r\n          }\r\n        />\r\n      </Card>\r\n      <Card title=\"Control\" loading={cardInfoLoading} style={{minWidth: \"30em\", maxWidth: \"60em\"}}>\r\n        <List\r\n          dataSource={controlButtons}\r\n          renderItem={item => \r\n            <List.Item style={{display: \"block\"}}>\r\n              { item }\r\n            </List.Item>\r\n          }\r\n        />\r\n      </Card>\r\n    </Space>\r\n  </>\r\n  );\r\n}\r\n"],"sourceRoot":""}