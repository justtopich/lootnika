{"version":3,"sources":["views/TasksJournal.tsx"],"names":["timeConversion","duration","portions","msInHour","hours","Math","trunc","push","minutes","seconds","join","TasksJournal","state","columns","title","dataIndex","width","rows","tableLoading","selectSize","recordStart","recordsTttl","style","paginationExt","paddingTop","a","this","updateTable","e","setState","valueOf","tasks","head","fakeLimit","fakeStart","rowsData","row","moment","s","forEach","k","replace","demoMode","axiosGetFake","status","data","queueinfo","resp","axiosGet","ttl","appendRowsFake","appendRows","message","error","length","className","position","right","paddingRight","zIndex","id","min","defaultValue","onChange","setRecordStart","onPressEnter","disabled","setSelectSize","icon","onClick","rowKey","dataSource","size","loading","pagination","defaultCurrent","showLessItems","total","bordered","sticky","whiteSpace","scroll","x","React","Component"],"mappings":"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","file":"static/js/9.7b3d7aa1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Space,\r\n  Card,\r\n  Table,\r\n  InputNumber,\r\n  Button,\r\n  message }\r\nfrom 'antd';\r\nimport { \r\n    ThunderboltOutlined,\r\n     }\r\n  from '@ant-design/icons';\r\nimport { axiosGetFake, axiosGet } from '../utils/public';\r\nimport { queueinfo } from '../store/apiExamples';\r\nimport moment from 'moment';\r\nimport { demoMode } from '../config/config'\r\nimport { Res, LooseObject } from '../config/index.type';\r\n\r\n\r\nfunction timeConversion(duration: number) {\r\n    const portions: string[] = [];\r\n  \r\n    const msInHour = 1000 * 60 * 60;\r\n    const hours = Math.trunc(duration / msInHour);\r\n    if (hours > 0) {\r\n      portions.push(hours + 'h');\r\n      duration = duration - (hours * msInHour);\r\n    }\r\n  \r\n    const msInMinute = 1000 * 60;\r\n    const minutes = Math.trunc(duration / msInMinute);\r\n    if (minutes > 0) {\r\n      portions.push(minutes + 'm');\r\n      duration = duration - (minutes * msInMinute);\r\n    }\r\n  \r\n    const seconds = Math.trunc(duration / 1000);\r\n    if (seconds > 0) {\r\n      portions.push(seconds + 's');\r\n    }\r\n  \r\n    return portions.join(' ');\r\n  }\r\n\r\nexport default class TasksJournal extends React.Component {\r\n    state = {\r\n        columns: [\r\n            {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            },{\r\n            title: 'status',\r\n            dataIndex: 'status',\r\n            width: '6em',\r\n            },{\r\n            title: 'start time',\r\n            dataIndex: 'start_time',\r\n            width: '11em',\r\n            },{\r\n            title: 'end time',\r\n            dataIndex: 'end_time',\r\n            width: '11em',\r\n            },{\r\n            title: 'duration',\r\n            dataIndex: 'duration',\r\n            },{\r\n            title: 'counts',\r\n            dataIndex: 'counts',\r\n            },\r\n        ],\r\n        rows: [],\r\n        tableLoading: true,\r\n        selectSize: 20,\r\n        recordStart: 0,\r\n        recordsTttl: 1,\r\n        style: { paginationExt: { paddingTop: \"0rem\" }},\r\n    }\r\n\r\n    async componentDidMount() {\r\n      await this.updateTable()\r\n    }\r\n\r\n    setSelectSize(e: number) {\r\n        if(e) {\r\n            this.setState({ selectSize: e.valueOf() })\r\n        }else{\r\n            this.setState({ selectSize: 10 })\r\n        }\r\n    }\r\n  \r\n    setRecordStart(e: number) {\r\n        if(e) {\r\n            this.setState({ recordStart: e.valueOf() })\r\n        }else{\r\n            this.setState({ recordStart: 0 })\r\n        }\r\n    }\r\n    \r\n    appendRowsFake(tasks: Array<LooseObject>){\r\n      let head = [\"total\", \"seen\", \"new\", \"differ\", \"delete\", \"task error\", \"export error\"]\r\n\r\n      let fakeLimit = 0\r\n      let fakeStart = 0\r\n      let rowsData = []\r\n\r\n      for (let row of tasks) {\r\n        if (fakeStart >= this.state.recordStart){\r\n          if (fakeLimit  < this.state.selectSize){\r\n            let a = moment(row[\"end_time\"], 'DD.MM.YYYY HH:mm:ss').valueOf() -\r\n                    moment(row[\"start_time\"],'DD.MM.YYYY HH:mm:ss').valueOf()\r\n            row[\"duration\"] = timeConversion(a)\r\n\r\n            let s = \"\"\r\n            head.forEach((k: string) => {\r\n                s += `${k}: ${row[\"count_\" + k.replace(' ', '_')]}\\n`\r\n            });\r\n            \r\n            row[\"counts\"] = `${s}last doc ID: ${row[\"last_doc_id\"]}`\r\n            rowsData.push(row)\r\n\r\n            fakeLimit += 1\r\n          }\r\n          fakeStart += 1\r\n        }\r\n        fakeStart += 1\r\n      }\r\n      // console.log(rowsData)\r\n      return rowsData\r\n    }\r\n\r\n    appendRows(tasks: Array<LooseObject>){\r\n      let head = [\"total\", \"seen\", \"new\", \"differ\", \"delete\", \"task error\", \"export error\"]\r\n      let rowsData = []\r\n\r\n      for (let row of tasks) {\r\n        let a = moment(row[\"end_time\"], 'DD.MM.YYYY HH:mm:ss').valueOf() -\r\n                moment(row[\"start_time\"],'DD.MM.YYYY HH:mm:ss').valueOf()\r\n        row[\"duration\"] = timeConversion(a)\r\n\r\n        let s = \"\"\r\n        head.forEach((k: string) => {\r\n          s += `${k}: ${row[\"count_\" + k.replace(' ', '_')]}\\n`\r\n        });\r\n        \r\n        row[\"counts\"] = `${s}last doc ID: ${row[\"last_doc_id\"]}`\r\n        rowsData.push(row)\r\n      }\r\n      return rowsData\r\n    }\r\n\r\n    async updateTable () {\r\n      this.setState({ tableLoading: true });\r\n      \r\n      let resp: Res\r\n      if(demoMode){\r\n          resp = await axiosGetFake(\r\n              `a=schedule?cmd=QueueInfo&start=${this.state.recordStart}&limit=${this.state.selectSize}`,\r\n              {status: 200, data: queueinfo}, 600\r\n          );\r\n      }else{\r\n          resp = await axiosGet(`a=schedule?cmd=QueueInfo&start=${this.state.recordStart}&limit=${this.state.selectSize}`);\r\n      }\r\n\r\n      let rowsData: Array<LooseObject> = []\r\n      let ttl = 1\r\n      if(resp){       \r\n        if(resp.data.status === \"ok\"){\r\n          if(demoMode){\r\n            rowsData = this.appendRowsFake(resp.data.tasks)\r\n          }else{\r\n            rowsData = this.appendRows(resp.data.tasks)\r\n          }\r\n        }else{\r\n          message.error(resp.data.message);\r\n        }\r\n      }\r\n\r\n      if(rowsData.length > 1){ ttl=rowsData.length }\r\n      this.setState({rows: rowsData, recordsTttl: ttl, tableLoading: false});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <>\r\n        <Card title=\"Tasks journal\">\r\n            <div className=\"pagination-ext\"\r\n                style={{ \r\n                    position: \"absolute\",\r\n                    right: 0,\r\n                    paddingTop: \".8em\",\r\n                    // paddingTop: this.state.style.paginationExt.paddingTop,\r\n                    paddingRight: \"2em\",\r\n                    zIndex: 1 }}\r\n            >\r\n                <Space >\r\n                    <span>Record start:</span>\r\n                    <InputNumber\r\n                        id=\"recordStart\"\r\n                        min={0}\r\n                        defaultValue={this.state.recordStart}\r\n                        onChange={(e) => this.setRecordStart(e)} \r\n                        onPressEnter={ () => this.updateTable() }\r\n                        disabled={this.state.tableLoading}\r\n                    />\r\n                    <span>Records limit:</span>\r\n                    <InputNumber\r\n                        id=\"selectSize\"\r\n                        min={1}\r\n                        defaultValue={this.state.selectSize}\r\n                        onChange={(e) => this.setSelectSize(e)} \r\n                        onPressEnter={ () => this.updateTable() }\r\n                        disabled={this.state.tableLoading}\r\n                    />\r\n                    <Button\r\n                        id=\"updateTable\"\r\n                        icon={<ThunderboltOutlined />}\r\n                        onClick={() => this.updateTable() }\r\n                        disabled={this.state.tableLoading} />\r\n                </Space>\r\n            </div>\r\n            <Table\r\n                rowKey=\"id\"\r\n                columns={this.state.columns}\r\n                dataSource={this.state.rows}\r\n                size=\"small\"\r\n                loading={this.state.tableLoading}\r\n                pagination={{\r\n                  defaultCurrent: 1,\r\n                  position: [\"topLeft\", \"bottomLeft\"],\r\n                  showLessItems: false,\r\n                  total: this.state.recordsTttl\r\n                }}\r\n                bordered = {true}\r\n                sticky = {true}\r\n                style={{ whiteSpace: 'pre' }}\r\n                scroll={{ x: \"80em\" }}\r\n                />\r\n        </Card>\r\n        </>\r\n        );\r\n    }\r\n};\r\n"],"sourceRoot":""}