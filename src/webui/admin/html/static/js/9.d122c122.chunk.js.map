{"version":3,"sources":["views/Logging.tsx"],"names":["TabPane","Tabs","Logging","useState","Date","toLocaleTimeString","forceUpdate","delay","isPlaying","logRecords","key","title","content","style","textAlign","margin","init","end","offsetEnd","offsetStart","hasMore","loading","records","fileListLoading","set_fileListLoading","downloadWait","downloadLink","set_downloadLink","getFileListPending","initRecordsPending","activeTab","a","done","demoMode","axiosGetFake","status","data","logList","resp","axiosGet","files","k","record","getRecords","logName","offset","limit","backward","offsetNew","endNew","fakeData","logRead","concat","scrollContent","height","dataLength","length","next","fetchMoreData","loader","endMessage","dataSource","renderItem","item","Item","className","toTop","ls","reverse","initRecords","API_URL","tabName","useInterval","getFileList","operations","onClick","icon","href","type","onChange","tabBarExtraContent","Object","values","map","pane","tab"],"mappings":"0TAaQA,EAAYC,IAAZD,QAEO,SAASE,IAAW,IAAD,EACPC,oBAAS,IAAIC,MAAOC,sBADb,mBACtBC,GADsB,WAI5BC,EAAQJ,mBAAS,KAAM,GACrBK,EAAYL,mBAAS,EAAC,IAAO,GAE7BM,EAAaN,mBAAqB,CACtC,eAAgB,CACdO,IAAK,IACLC,MAAO,GACPC,QAAS,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,OAA1C,SAAkD,cAAC,IAAD,MAC3DC,MAAM,EACNC,KAAM,EACNC,WAAY,EACZC,aAAc,EACdC,SAAS,EACTC,SAAS,EACTC,QAAS,MAEV,GApB6B,EAsBenB,oBAAS,GAtBxB,mBAsBzBoB,EAtByB,KAsBRC,EAtBQ,KAwB1BC,EAAetB,oBAAS,GAAO,GAxBL,EAyBSA,mBAAS,IAzBlB,mBAyBzBuB,EAzByB,KAyBXC,EAzBW,KA0B1BC,EAAqBzB,mBAAS,EAAC,IAAQ,GAEvC0B,EAAqB1B,mBAAS,EAAC,IAAQ,GACvC2B,EAAY3B,mBAAS,CAAC,KAAK,GA7BD,4CAiChC,wCAAA4B,EAAA,yDAEMC,GAAO,GACPJ,EAAmB,GAHzB,0CAIW,GAJX,UAOEA,EAAmB,IAAK,GAErBK,IATL,iCAUiBC,YAAa,iBAAkB,CAACC,OAAQ,IAAKC,KAAMC,KAAU,KAV9E,OAUIC,EAVJ,gDAYiBC,YAAS,kBAZ1B,QAYID,EAZJ,eAeE,GAAIA,EAAK,yBAIOA,SAJP,aAIO,EAAMF,KAAKI,OAJlB,IAIP,2BAASC,EAAuB,QAC1BC,EAAoB,CACtBhC,IAAK+B,EACL9B,MAAO8B,EACP7B,QAAS,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,OAA1C,SAAkD,cAAC,IAAD,MAC3DC,MAAM,EACNC,KAAM,EACNC,WAAY,EACZC,aAAc,EACdE,SAAS,EACTD,SAAS,EACTE,QAAS,IAEXb,EAAWgC,GAAKC,EAjBX,8BAsBPlB,GAAoB,GACpBQ,GAAO,EAtCX,OAwCEJ,EAAmB,IAAK,EAxC1B,kBAyCSI,GAzCT,6CAjCgC,+BA6EjBW,EA7EiB,sFA6EhC,WAA0BC,EAAgBC,EAAeC,EAAcC,EAAkB/B,GAAzF,iCAAAe,EAAA,yDAEMiB,GAAa,EACbC,GAAU,EACV3B,EAAU,IASXW,IAbL,wBAcQiB,EAAWC,IAAQP,GAEnBG,IACFG,EAAS5B,QAAU,CAAC,wBAGF,oBAAjBQ,EAAU,KACXoB,EAAS5B,QAAU,CAAC,KArB1B,SAwBiBY,YACX,yDACA,CAACC,OAAQ,IAAKC,KAAMc,GAAW,KA1BrC,OAwBIZ,EAxBJ,gDA6BiBC,YAAS,uBAAD,OAAwBK,EAAxB,kBAAyCE,EAAzC,qBAA2DC,EAA3D,mBAA8EF,IA7BvG,QA6BIP,EA7BJ,sBAgCMA,IACFU,EAAS,UAAGV,SAAH,aAAG,EAAMF,KAAKS,OACvBI,EAAM,UAAGX,SAAH,aAAG,EAAMF,KAAKnB,IAIhBK,EAFDN,EACE+B,EACStC,EAAWmC,GAAStB,QAAQ8B,OAA5B,UAAmCd,SAAnC,aAAmC,EAAMF,KAAKd,SAEjD,UAAGgB,SAAH,aAAG,EAAMF,KAAKd,QAAQ8B,OAAO3C,EAAWa,SAG1C,UAAGgB,SAAH,aAAG,EAAMF,KAAKd,SA3C3B,kBAiDS,CAAC0B,EAAWC,EAAQ3B,IAjD7B,6CA7EgC,+BAiIjB+B,EAjIiB,8EAiIhC,WAA6BT,GAA7B,SAAAb,EAAA,+EAGI,cAAC,IAAD,CACAuB,OAAO,OACPC,WAAY9C,EAAWmC,GAAStB,QAAQkC,OACxCC,KAAM,kBAAMC,GAAc,IAC1BtC,QAASX,EAAWmC,GAASxB,QAC7BuC,OAAQ,qBAAK9C,MAAO,CAACC,UAAW,SAAUC,OAAQ,OAA1C,SAAkD,cAAC,IAAD,MAC1D6C,WACE,mBAAG/C,MAAO,CAAEC,UAAW,UAAvB,SACE,8CARJ,SAYA,cAAC,IAAD,CAEA+C,WAAYpD,EAAWmC,GAAStB,QAChCwC,WAAY,SAACC,GAAD,OACV,cAAC,IAAKC,KAAN,CAAWC,UAAU,gBAArB,SACE,+BACGF,YArBX,4CAjIgC,+BAgKjBL,EAhKiB,8EAgKhC,WAA6BQ,GAA7B,qCAAAnC,EAAA,0DAGKmC,EAHL,iCAI6CvB,EAAWb,EAAU,GAAIrB,EAAWqB,EAAU,IAAIX,YAAa,IAAI,GAAM,GAJtH,0CAIS6B,EAJT,KAIoBC,EAJpB,KAI4B3B,EAJ5B,KASIb,EAAWqB,EAAU,IAAIX,YAAc6B,EACvCvC,EAAWqB,EAAU,IAAIb,IAAMgC,EAE3BkB,EAAe1D,EAAWqB,EAAU,IAAIR,QAC5Cb,EAAWqB,EAAU,IAAIR,QAAU6C,EAAGf,OAAO9B,GAbjD,UAc6C+B,EAAcvB,EAAU,IAdrE,QAcIrB,EAAWqB,EAAU,IAAIlB,QAd7B,OAiBwB,oBAAjBkB,EAAU,IAA4BG,MACvCxB,EAAWqB,EAAU,IAAIX,YAAc,GAGrCV,EAAWqB,EAAU,IAAIX,aAAe,IAC1CV,EAAWqB,EAAU,IAAIV,SAAU,GAtBzC,yCAyB6CuB,EAAWb,EAAU,GAAIrB,EAAWqB,EAAU,IAAIZ,UAAW,KAAM,GAAO,GAzBvH,2CAyBS8B,EAzBT,KAyBoBC,EAzBpB,KAyB4B3B,EAzB5B,KA2BIb,EAAWqB,EAAU,IAAIZ,UAAY8B,EACrCvC,EAAWqB,EAAU,IAAIb,IAAMgC,EAE3BkB,EAAe1D,EAAWqB,EAAU,IAAIR,QAC5Cb,EAAWqB,EAAU,IAAIR,QAAUA,EAAQ8C,UAAUhB,OAAOe,GA/BhE,UAgC6Cd,EAAcvB,EAAU,IAhCrE,QAgCIrB,EAAWqB,EAAU,IAAIlB,QAhC7B,eAuCEN,GAAY,IAAIF,MAAOC,sBAvCzB,6CAhKgC,+BA0MjBgE,EA1MiB,gFA0MhC,WAA2BzB,EAAgBE,GAA3C,yBAAAf,EAAA,yDACKE,IACDN,EAAiB,0BAA4BiB,GAE7CjB,EAAiB2C,IAAU,uBAAyB1B,IAGlDf,EAAmB,GAPzB,0CAQW,GARX,UAWEA,EAAmB,IAAK,GAErBI,IAbL,wBAcQiB,EAAWC,IAAQP,IACdtB,QAAU4B,EAAS5B,QAAQ8C,UAfxC,SAiBiBlC,YACX,yDACA,CAACC,OAAQ,IAAKC,KAAMc,GAAW,KAnBrC,OAiBIZ,EAjBJ,gDAsBiBC,YAAS,uBAAD,OAAwBK,EAAxB,kBAAyCE,EAAzC,mBAtBzB,QAsBIR,EAtBJ,sBAyBMA,IACF7B,EAAWmC,GAAStB,QAApB,UAA8BgB,SAA9B,aAA8B,EAAMF,KAAKd,QACzCb,EAAWmC,GAAS3B,IAApB,UAA0BqB,SAA1B,aAA0B,EAAMF,KAAKnB,IACrCR,EAAWmC,GAAS1B,UAApB,UAAgCoB,SAAhC,aAAgC,EAAMF,KAAKnB,IAC3CR,EAAWmC,GAASzB,YAApB,UAAkCmB,SAAlC,aAAkC,EAAMF,KAAKS,OAC7CpC,EAAWmC,GAASxB,SAAU,EAC9BU,EAAU,GAAKc,GAIjBnC,EAAWmC,GAAS5B,MAAO,EAnC7B,UAoCsCqC,EAAcT,GApCpD,QAoCEnC,EAAWmC,GAAShC,QApCtB,OAqCEiB,EAAmB,IAAK,EACxBvB,GAAY,IAAIF,MAAOC,sBAtCzB,6CA1MgC,kEAmPhC,WAAyBkE,GAAzB,SAAAxC,EAAA,sDAEKtB,EAAW8D,GAASvD,MAClBiB,IACDN,EAAiB,0BAA4B4C,GAE7C5C,EAAiB2C,IAAU,uBAAyBC,GAEtDzC,EAAU,GAAKyC,GAEfF,EAAYE,EAAS,IAVzB,4CAnPgC,sBAiQhCC,aACM,WAEMjD,IAAoBK,EAAmB,IApQnB,0CAqQnB6C,IACDJ,EAAY,eAAgB,IAI3B9C,GAAoBK,EAAmB,KAC1CpB,EAAU,IAAK,KAEhBA,EAAU,GAAKD,EAAQ,MAGhC,IAAMmE,EAAa,gCACjB,cAAC,IAAD,CAAQrD,QAASI,EAAckD,QAAS,kBAAMjB,GAAc,IAASkB,KAAM,cAAC,IAAD,IAA3E,oBACA,cAAC,IAAD,CAAQvD,QAASI,EAAcoD,KAAMnD,EAAckD,KAAM,cAAC,IAAD,IAAzD,yBAIF,OACE,cAAC,IAAD,CAAMjE,MAAM,cAAZ,SACE,cAAC,IAAD,CACEmE,KAAK,OACLC,SA1R0B,4CA2R1BC,mBAAoBN,EAHtB,SAIKO,OAAOC,OAAOzE,GAAY0E,KAAI,SAAAC,GAAI,OACjC,cAACpF,EAAD,CAASqF,IAAKD,EAAKzE,MAAnB,SACGyE,EAAKxE,SADuBwE,EAAK1E","file":"static/js/9.d122c122.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { axiosGetFake, axiosGet, useInterval } from '../utils/public';\r\nimport { Res, ILogRecods, ILogRecod } from '../config/index.type';\r\nimport { \r\n  logList,\r\n  logRead,\r\n} from '../store/apiExamples';\r\nimport { demoMode, API_URL } from '../config/config';\r\nimport { Tabs, Button, List, Spin, Card } from 'antd';\r\nimport {DownloadOutlined, RedoOutlined} from '@ant-design/icons';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nexport default function Logging() {\r\n  const [_, forceUpdate] = useState(new Date().toLocaleTimeString());\r\n\r\n\r\n  let delay = useState(1000)[0];\r\n  const isPlaying = useState([true])[0];\r\n  // const [fileList, set_fileList] = useState([{ key: '1', title: '', content: <Loading /> }]);\r\n  const logRecords = useState<ILogRecods>({\r\n    \"lootnika.log\": {\r\n      key: '1',\r\n      title: '',\r\n      content: <div style={{textAlign: 'center', margin: '2em'}}><Spin /></div>,\r\n      init: false,\r\n      end: -1,\r\n      offsetEnd: -1,\r\n      offsetStart: -1,\r\n      hasMore: true,\r\n      loading: true,\r\n      records: []\r\n    },\r\n  })[0];\r\n\r\n  const [fileListLoading, set_fileListLoading] = useState(true);\r\n\r\n  const downloadWait = useState(false)[0];\r\n  const [downloadLink, set_downloadLink] = useState('');\r\n  const getFileListPending = useState([false])[0];\r\n  // const loadRecordsPending = useState([false])[0];\r\n  const initRecordsPending = useState([false])[0];\r\n  const activeTab = useState([''])[0];\r\n\r\n  // var activeTab = \"\";\r\n\r\n  async function getFileList(): Promise<boolean> {\r\n    // console.log('getFileList')\r\n    let done = false;\r\n    if (getFileListPending[0]){\r\n      return false\r\n    }\r\n   \r\n    getFileListPending[0] = true;\r\n    let resp: Res\r\n    if(demoMode){\r\n      resp = await axiosGetFake('a=log?cmd=list', {status: 200, data: logList}, 300);\r\n    }else{\r\n      resp = await axiosGet('a=log?cmd=list');\r\n    }\r\n   \r\n    if (resp){\r\n      // let m:Array<{ key: string, title: string, content: JSX.Element }> = []\r\n      // let records: ILogRecods = {};\r\n\r\n      for (let k of resp?.data.files) {\r\n        let record: ILogRecod = {\r\n          key: k,\r\n          title: k,\r\n          content: <div style={{textAlign: 'center', margin: '2em'}}><Spin /></div>,\r\n          init: false,\r\n          end: -1,\r\n          offsetEnd: -1,\r\n          offsetStart: -1,\r\n          loading: true,\r\n          hasMore: true,\r\n          records: []\r\n        }\r\n        logRecords[k] = record;\r\n        // m.push({key: k, title: k, content: <div><Loading /></div>})\r\n      };\r\n      \r\n      // set_fileList(m)\r\n      set_fileListLoading(false)\r\n      done = true;\r\n    }\r\n    getFileListPending[0] = false;\r\n    return done\r\n  }\r\n\r\n  async function getRecords(logName:string, offset:number, limit:number, backward:boolean, init:boolean): Promise<[number, number, string[]]> {\r\n    // console.log(`loadRecords ${logName}`);\r\n    let offsetNew = -1;\r\n    let endNew = -1;\r\n    let records = [];\r\n\r\n    // if (loadRecordsPending[0]){\r\n    //   return false\r\n    // }\r\n\r\n    // loadRecordsPending[0] = true;\r\n\r\n    let resp: Res\r\n    if(demoMode){\r\n      let fakeData = logRead[logName]\r\n      \r\n      if(!backward){\r\n        fakeData.records = ['Fresh random record']\r\n      }\r\n\r\n      if(activeTab[0] === 'user_topics.log'){\r\n        fakeData.records = ['']\r\n      }\r\n\r\n      resp = await axiosGetFake(\r\n        'a=log?cmd=read&file=lootnika.log&limit=2&backward=true',\r\n        {status: 200, data: fakeData}, 600\r\n      );\r\n    }else{\r\n      resp = await axiosGet(`a=log?cmd=read&file=${logName}&limit=${limit}&backward=${backward}&offset=${offset}`);\r\n    }\r\n\r\n    if (resp){\r\n      offsetNew = resp?.data.offset;\r\n      endNew = resp?.data.end;\r\n\r\n      if(init){\r\n        if(backward){\r\n          records = logRecords[logName].records.concat(resp?.data.records);\r\n        }else{\r\n          records = resp?.data.records.concat(logRecords.records);\r\n        }\r\n      }else{\r\n        records = resp?.data.records;\r\n      }\r\n    }\r\n\r\n    // loadRecordsPending[0] = false;\r\n    // console.log([offsetNew, endNew, records])\r\n    return [offsetNew, endNew, records]\r\n  }\r\n\r\n  async function scrollContent(logName: string) {\r\n    // console.log('length ' + logRecords[logName].records.length);\r\n    return (\r\n      <InfiniteScroll\r\n      height='70vh'\r\n      dataLength={logRecords[logName].records.length}\r\n      next={() => fetchMoreData(true)}\r\n      hasMore={logRecords[logName].hasMore}\r\n      loader={<div style={{textAlign: 'center', margin: '2em'}}><Spin /></div>}\r\n      endMessage={\r\n        <p style={{ textAlign: \"center\" }}>\r\n          <b>This is top</b>\r\n        </p>\r\n      }\r\n    >\r\n      <List\r\n      // style={{maxHeight: \"70vh\"}}\r\n      dataSource={logRecords[logName].records}\r\n      renderItem={(item: string) => \r\n        <List.Item className=\"log-list-item\">\r\n          <span>\r\n            {item}\r\n          </span>\r\n        </List.Item>\r\n      }\r\n     />\r\n\r\n    </InfiniteScroll>\r\n    )\r\n  }\r\n\r\n  async function fetchMoreData(toTop:boolean) {\r\n    // console.log(logRecords[activeTab])\r\n    \r\n    if(toTop){\r\n      let [offsetNew, endNew, records] = await getRecords(activeTab[0], logRecords[activeTab[0]].offsetStart, 50, true, false)\r\n      // console.log([offsetNew, endNew, records]);\r\n\r\n      // console.log(`${logRecords[activeTab[0]].offsetStart} -> ${offsetNew}`)\r\n\r\n      logRecords[activeTab[0]].offsetStart = offsetNew;\r\n      logRecords[activeTab[0]].end = endNew;\r\n\r\n      let ls: string[] = logRecords[activeTab[0]].records \r\n      logRecords[activeTab[0]].records = ls.concat(records);\r\n      logRecords[activeTab[0]].content = await scrollContent(activeTab[0]);\r\n\r\n      // console.log(logRecords[activeTab[0]].offsetStart)\r\n      if(activeTab[0] === 'user_topics.log' && demoMode){\r\n        logRecords[activeTab[0]].offsetStart = 0\r\n      }\r\n\r\n      if (logRecords[activeTab[0]].offsetStart <= 0) {\r\n        logRecords[activeTab[0]].hasMore = false;\r\n      }\r\n    }else{\r\n      let [offsetNew, endNew, records] = await getRecords(activeTab[0], logRecords[activeTab[0]].offsetEnd, 1000, false, false)\r\n\r\n      logRecords[activeTab[0]].offsetEnd = offsetNew;\r\n      logRecords[activeTab[0]].end = endNew;\r\n\r\n      let ls: string[] = logRecords[activeTab[0]].records\r\n      logRecords[activeTab[0]].records = records.reverse().concat(ls);\r\n      logRecords[activeTab[0]].content = await scrollContent(activeTab[0]);\r\n      \r\n      // if (logRecords[activeTab[0]].offsetStart <= 0) {\r\n      //   logRecords[activeTab[0]].hasMore = false;\r\n      // }\r\n    }\r\n\r\n    forceUpdate(new Date().toLocaleTimeString())\r\n  };\r\n\r\n  async function initRecords(logName:string, limit:number) {\r\n    if(demoMode){\r\n      set_downloadLink('/lootnika/static/files/' + logName)\r\n    }else{\r\n      set_downloadLink(API_URL + '/a=log?cmd=get&file=' + logName)\r\n    }\r\n\r\n    if (initRecordsPending[0]){\r\n      return false\r\n    }\r\n\r\n    initRecordsPending[0] = true;\r\n    let resp: Res\r\n    if(demoMode){\r\n      let fakeData = logRead[logName]\r\n      fakeData.records = fakeData.records.reverse()\r\n\r\n      resp = await axiosGetFake(\r\n        'a=log?cmd=read&file=lootnika.log&limit=2&backward=true',\r\n        {status: 200, data: fakeData}, 600\r\n      );\r\n    }else{\r\n      resp = await axiosGet(`a=log?cmd=read&file=${logName}&limit=${limit}&backward=true`);\r\n    }\r\n\r\n    if (resp){\r\n      logRecords[logName].records = resp?.data.records;\r\n      logRecords[logName].end = resp?.data.end;\r\n      logRecords[logName].offsetEnd = resp?.data.end;\r\n      logRecords[logName].offsetStart = resp?.data.offset;\r\n      logRecords[logName].hasMore = true;\r\n      activeTab[0] = logName;\r\n    }\r\n\r\n    // fileList\r\n    logRecords[logName].init = true;\r\n    logRecords[logName].content = await scrollContent(logName);\r\n    initRecordsPending[0] = false;\r\n    forceUpdate(new Date().toLocaleTimeString())\r\n  }\r\n\r\n  async function switchTab(tabName:string) {\r\n    // console.log(`switchTab ${tabName}`)\r\n    if(logRecords[tabName].init){\r\n      if(demoMode){\r\n        set_downloadLink('/lootnika/static/files/' + tabName)\r\n      }else{\r\n        set_downloadLink(API_URL + '/a=log?cmd=get&file=' + tabName)\r\n      }\r\n      activeTab[0] = tabName;\r\n    }else{\r\n      initRecords(tabName, 50)\r\n    }\r\n  }\r\n  \r\n  useInterval(\r\n        () => {\r\n          // console.log(`fileListLoading=${fileListLoading} getFileListPending=${getFileListPending[0]}`);\r\n          if (fileListLoading && !getFileListPending[0]){\r\n            if(getFileList()){\r\n              initRecords('lootnika.log', 50);\r\n            }\r\n          }\r\n\r\n          if (!fileListLoading && !getFileListPending[0]){\r\n            isPlaying[0] = false\r\n          }\r\n        }, isPlaying[0] ? delay : null,\r\n  );\r\n\r\n  const operations = <div>\r\n    <Button loading={downloadWait} onClick={() => fetchMoreData(false) } icon={<RedoOutlined />}>Update</Button>\r\n    <Button loading={downloadWait} href={downloadLink} icon={<DownloadOutlined />}>Download</Button>\r\n  </div>;\r\n\r\n  // console.log(logRecords)\r\n  return (\r\n    <Card title=\"Logs viewer\">\r\n      <Tabs\r\n        type=\"card\"\r\n        onChange={switchTab}\r\n        tabBarExtraContent={operations}>\r\n          {Object.values(logRecords).map(pane => (\r\n            <TabPane tab={pane.title} key={pane.key}>\r\n              {pane.content}\r\n            </TabPane>\r\n          ))}\r\n      </Tabs>\r\n    </Card>\r\n\r\n  )\r\n}\r\n"],"sourceRoot":""}